dofunction = 1
xmin = 2
xmax = 4
ymin = 3
ymax = 5
enable = 6
textcolor = 8
backcolor = 9
text = 10
width = 11 
btnindx = { }
prgindx = { }
gui =
{
    button =
    {
	    index = function (func,x1,y1,x2,y2,color,tcolor,bcolor,text,w)
		  	if type(func) ~= "function" then error("Invalid argument 1 of gui.button.index, expected function, got ".. type(func) .. ", wanted function to run",2) end
		  	if type(x1) ~= "number" then error("Invalid argument 2 of gui.button.index, expected number, got ".. type(x1) .. ", wanted x1 value",2) end
		  	if type(y1) ~= "number" then error("Invalid argument 3 of gui.button.index, expected number, got ".. type(y2) .. ", wanted y1 value",2) end
		  	if type(x2) ~= "number" then error("Invalid argument 4 of gui.button.index, expected number, got ".. type(x2) .. ", wanted x2 value",2) end
		  	if type(y2) ~= "number" then error("Invalid argument 5 of gui.button.index, expected number, got ".. type(y2) .. ", wanted y2 value",2) end
		  	if type(color) ~= "boolean" then error("Invalid argument 6 of gui.button.index, expected number, got ".. type(color) .. ", wanted weather or not to draw button",2) end
		  	if type(tcolor) ~= "number" and type(tcolor) ~=  "nil" then error("Invalid argument 7 of gui.button.index, expected number, got ".. type(tcolor) .. ",wanted text color",2) end
		  	if type(bcolor) ~= "number" and type(bcolor) ~= "nil" then error("Invalid argument 8 of gui.button.index, expected number, got ".. type(bcolor) .. ",wanted background color",2) end
		  	if type(text) ~= "string" and type(text) ~= "nil" then error("Invalid argument 9 of gui.button.index, expected string, got ".. type(text) .. ", wanted button caption",2) end
		  	if type(w) ~= "number" and type(w) ~= "nil" then error("Invalid argument 10 of gui.button.index, expected number, got ".. type(w) .. ", wanted button width",2) end
		  	if tcolor == nil or bcolor == nil or text == nil then tcolor = " "; bcolor = " "; text = " " end
		 	table.insert(btnindx,{func,x1,y1,x2,y2,true,color,tcolor,bcolor,text,w})
		  	return #btnindx
		end,
	    draw = function (text, x,y,w,h, tcolor, bcolor)
		    if type(text) ~= "string" then error("Invalid argument 1 of gui.button.draw, expected string, got ".. type(text) .. ", wanted button caption",2) end
		  	if type(x) ~= "number" then error("Invalid argument 2 of gui.button.draw, expected number, got ".. type(x) .. ", wanted x value",2) end
		  	if type(y) ~= "number" then error("Invalid argument 3 of gui.button.draw, expected number, got ".. type(y) .. ", wanted y value",2) end
		  	if type(w) ~= "number" then error("Invalid argument 4 of gui.button.draw, expected number, got ".. type(w) .. ", wanted button horizantal spacing",2) end
		  	if type(h) ~= "number" then error("Invalid argument 5 of gui.button.draw, expected number, got ".. type(h) .. ", wanted button height",2) end
		  	if type(tcolor) ~= "number" then error("Invalid argument 6 of gui.button.draw, expected number, got ".. type(y) .. ",wanted text color",2) end
		  	if type(bcolor) ~= "number" then error("Invalid argument 7 of gui.button.draw, expected number, got ".. type(y) .. ",wanted background color",2) end
		  	l = string.len(text)
		  	gui.shape.rect(x,y,(w * 2) + l,h,bcolor)
		  	term.setCursorPos(w+x,(h/2)+y)
		  	term.setTextColor(tcolor)
		  	term.write(text)
		end,
		add = function (text, func, x,y,w,h, tcolor, bcolor)
		  	if type(text) ~= "string" then error("Invalid argument 1 of gui.button.add, expected string, got ".. type(text) .. ", wanted button caption",2) end
		  	if type(func) ~= "function" then error("Invalid argument 2 of gui.button.add, expected function, got ".. type(func) .. ", wanted function to run",2) end
		  	if type(x) ~= "number" then error("Invalid argument 3 of gui.button.add, expected number, got ".. type(x) .. ", wanted x value",2) end
		  	if type(y) ~= "number" then error("Invalid argument 4 of gui.button.add, expected number, got ".. type(y) .. ", wanted y value",2) end
		  	if type(w) ~= "number" then error("Invalid argument 5 of gui.button.add, expected number, got ".. type(w) .. ", wanted button horizantal spacing",2) end
		  	if type(h) ~= "number" then error("Invalid argument 6 of gui.button.add, expected number, got ".. type(h) .. ", wanted button height",2) end
		  	if type(tcolor) ~= "number" then error("Invalid argument 7 of gui.button.add, expected number, got ".. type(y) .. ",wanted text color",2) end
		  	if type(bcolor) ~= "number" then error("Invalid argument 8 of gui.button.add, expected number, got ".. type(y) .. ",wanted background color",2) end
		  	gui.button.draw(text,x,y,w,h,tcolor,bcolor)
		  	return gui.button.index(func,x,y,x + string.len(text) + (w * 2) - 1,y + h - 1,true,tcolor,bcolor,text,w)
		end,
		gray = function (key)
			if type(key) ~= "number" then error("Invalid argument of gui.button.gray, expected number, got ".. type(key) .. ", wanted button ID to gray",2) end
		  	if btnindx[key] == nil then error("Invalid argument of gui.button.gray, specified button ID does not exist",2) end
		  	if btnindx[key][6] == true then
		  		btnindx[key][6] = false
		  		if btnindx[key][7] == true then
		  			gui.button.draw(btnindx[key][text], btnindx[key][xmin], btnindx[key][ymin], btnindx[key][width], (btnindx[key][ymax] - btnindx[key][ymin]) + 1, colors.white, colors.gray)
		  		end

		  	else
		  		btnindx[key][6] = true
		  		if btnindx[key][7] == true then
		  			gui.button.draw(btnindx[key][text], btnindx[key][xmin], btnindx[key][ymin], btnindx[key][width], (btnindx[key][ymax] - btnindx[key][ymin]) + 1, btnindx[key][textcolor],btnindx[key][backcolor])
		  			
		  		end
		  	end
		end
    },
    shape =
    {
		 altrect = function (x1,y1,x2,y2,color)
		  	if type(x1) ~= "number" then error("Invalid argument 1 of gui.shape.altrect, expected number, got ".. type(x1) .. ", wanted x1 value",2) end
		  	if type(y1) ~= "number" then error("Invalid argument 2 of gui.shape.altrect, expected number, got ".. type(y2) .. ", wanted y1 value",2) end
		  	if type(x2) ~= "number" then error("Invalid argument 3 of gui.shape.altrect, expected number, got ".. type(x2) .. ", wanted x2 value",2) end
		  	if type(y2) ~= "number" then error("Invalid argument 4 of gui.shape.altrect, expected number, got ".. type(y2) .. ", wanted y2 value",2) end
		  	if type(color) ~= "number" then error("Invalid argument 5 of gui.shape.altrect, expected number, got ".. type(color) .. ", wanted color",2) end
		  	for ydraw = y1,y2 - 1 do
		  		for xdraw = x1,x2 - 1 do
		  			gui.fill(xdraw,ydraw,color)
		  		end
		  	end
		end,
		rect = function (x,y,w,h,color)
		  	if type(x) ~= "number" then error("Invalid argument 1 of gui.shape.rect, expected number, got ".. type(x) .. ", wanted x value",2) end
		  	if type(y) ~= "number" then error("Invalid argument 2 of gui.shape.rect, expected number, got ".. type(y2) .. ", wanted y value",2) end
		  	if type(w) ~= "number" then error("Invalid argument 3 of gui.shape.rect, expected number, got ".. type(x2) .. ", wanted width value",2) end
		  	if type(h) ~= "number" then error("Invalid argument 4 of gui.shape.rect, expected number, got ".. type(y2) .. ", wanted height value",2) end
		  	if type(color) ~= "number" then error("Invalid argument 5 of gui.shape.rect, expected number, got ".. type(color) .. ", wanted color",2) end
		  	gui.shape.altrect(x,y,x+w,y+h,color)
		end,
		line = function (x1,y1,x2,y2,color)
		  	if type(x1) ~= "number" then error("Invalid argument 1 of gui.shape.line, expected number, got ".. type(x1) .. ", wanted x1 value",2) end
		  	if type(y1) ~= "number" then error("Invalid argument 2 of gui.shape.line, expected number, got ".. type(y1) .. ", wanted y1 value",2) end
		  	if type(x2) ~= "number" then error("Invalid argument 3 of gui.shape.line, expected number, got ".. type(x2) .. ", wanted x2 value",2) end
		  	if type(y2) ~= "number" then error("Invalid argument 3 of gui.shape.line, expected number, got ".. type(y2) .. ", wanted y2 value",2) end
		  	if type(color) ~= "number" then error("Invalid argument 4 of gui.shape.line, expected number, got ".. type(color) .. ", wanted color value",2) end
		  	--local m = (y2 - y1) / (x2 / x1)
			--for lx = x1, x2 do
	 		--	local ly = (m * lx) + y1
	 		--	gui.fill(lx, ly, color)
			--end
			rise = y2 - y1
			run = x2 - x1
			m = rise / run
			if x1 == x2 or y1 == y2 then
				gui.shapes.altrect(x1, x2, y1, y2, color)
			else
				for i = x1, x2 do
					y = (m * i) + y1
					gui.fill(i, y, color)
				end
			end
		end
    },
    progbar =
    {
	 	add = function (x, y, width, percent, forecolor, backcolor)
	 		if type(x) ~= "number" then error("Invalid argument 1 of gui.progbar.add, expected number, got ".. type(x) .. ", wanted x value",2) end
	 		if type(y) ~= "number" then error("Invalid argument 2 of gui.progbar.add, expected number, got ".. type(y) .. ", wanted y value",2) end
	 		if type(width) ~= "number" then error("Invalid argument 3 of gui.progbar.add, expected number, got ".. type(width) .. ", wanted width value",2) end
	 		if type(percent) ~= "number" then error("Invalid argument 4 of gui.progbar.add, expected number, got ".. type(percent) .. ", wanted percent value",2) end
	 		if type(forecolor) ~= "number" then error("Invalid argument 5 of gui.progbar.add, expected number, got ".. type(forecolor) .. ", wanted forecolor value)",2) end
	 		if type(backcolor) ~= "number" then error("Invalid argument 6 of gui.progbar.add, expected number, got ".. type(backcolor) .. ", wanted x backcolor",2) end
	  		gui.shape.rect(x,y,width,1,backcolor)
	 		if percent > 100 then percent = 100 end
	 		gui.shape.rect(x,y,(percent / 100) * width,1,forecolor)
	 		table.insert(prgindx,{x,y,width,percent,forecolor,backcolor})
	 		return #prgindx
	 	end,
	 	increment = function (key, percent)
	 		if type(key) ~= "number" then error("Invalid argument 1 of gui.progbar.increment, expected number, got ".. type(key) .. ", wanted progress bar ID value",2) end
	 		if type(percent) ~= "number" then error("Invalid argument 2 of gui.progbar.increment, expected number, got ".. type(percent) .. ", wanted percent incriment value",2) end
	  		prgindx[key][4] = prgindx[key][4] + percent
	 		if prgindx[key][4] > 100 then prgindx[key][4] = 100 end
	 		gui.shape.rect(prgindx[key][1],prgindx[key][2],prgindx[key][3],1,prgindx[key][6])
	 		gui.shape.rect(prgindx[key][1],prgindx[key][2],(prgindx[key][4] / 100) * prgindx[key][3],1,prgindx[key][5])
	 		return prgindx[key][4]
	 	end,
	 	set = function (key, percent)
	 		if type(key) ~= "number" then error("Invalid argument 1 of gui.progbar.set, expected number, got ".. type(key) .. ", wanted progress bar ID value",2) end
	 		if type(percent) ~= "number" then error("Invalid argument 2 of gui.progbar.set, expected number, got ".. type(percent) .. ", wanted percent incriment value",2) end
	 		prgindx[key][4] = percent
	 		if prgindx[key][4] > 100 then prgindx[key][4] = 100 end
	 		gui.shape.rect(prgindx[key][1],prgindx[key][2],prgindx[key][3],1,prgindx[key][6])
	 		gui.shape.rect(prgindx[key][1],prgindx[key][2],(prgindx[key][4] / 100) * prgindx[key][3],1,prgindx[key][5])
	 	end
	},
	fill = function (x,y,color, char)
		if type(x) ~= "number" then error("Invalid argument 1 of gui.fill, expected number, got ".. type(x) .. ", wanted x value",2) end
	 	if type(y) ~= "number" then error("Invalid argument 2 of gui.fill, expected number, got ".. type(y) .. ", wanted y value",2) end
	 	if type(color) ~= "number" then error("Invalid argument 3 of gui.fill, expected number, got ".. type(color) .. ", wanted color",2) end
	 	if type(char) ~= "string" and type(char) ~= "nil" then error("Invalid argument 4 of gui.fill, expected string, got ".. type(char) .. ", wanted single character (string)",2) end
	 	if type(char) ~= "nil" then if string.len(char) ~= 1 then error("Invalid argument 4 of gui.fill, expected 1 charecter, got".. string.len(char) .. " charectars, wanted charecter or nil",2) end end
		term.setCursorPos(x,y)
		term.setBackgroundColor(color)
		if type(char) == "nil" then term.write(" ") else term.write(char) end
	end
}

---------------------------------------------------
--       ||                             ||       --
--      _||_  Place your methods here  _||_      --
--      \  /                           \  /      --  
--       \/                             \/       --
---------------------------------------------------



---------------------------------------------------
--       /\                             /\       --
--      /  \                           /  \      --
--      ~||~  Place your methods here  ~||~      --
--       ||                             ||       --
---------------------------------------------------

thisway = function ()

---------------------------------------------------
--         ||                        ||          --
--        _||_ Place your code here _||_         --
--        \  /                      \  /         --
--         \/                        \/          --
---------------------------------------------------

--HOLYSHITNOTHEREIMACOMMENT!!!!!!!!!!!!!!!!!!!!!!--

---------------------------------------------------
--         /\                        /\          --
--        /  \                      /  \         --
--        ~||~ Place your code here ~||~         --
--         ||                        ||          --
---------------------------------------------------

end
start = function ()
	dof = true
	while dof == true do
		local event, button, xpos, ypos = os.pullEvent("mouse_click")
		for i = 1, #btnindx do
			if xpos >= btnindx[i][2] and xpos <= btnindx[i][4] and ypos >= btnindx[i][3] and ypos <= btnindx[i][5] and btnindx[i][6] == true then
				btnindx[i][1]()
			end
		end
	end
end
stop = function ()
	dof = false
end

if Is_running_in_portable_mode == true then parallel.waitForAll(thisway,start) end

--Leonard Henry Phelan IV
