--[[
    Библиотека для работы с текстом, заменяет
    одноимённую библиотеку из CraftOS.
]]

-----------------------------------------------------------------------------------------------------------------------------------

function test(string)
	print(string)
end

-----------------------------------------------------------------------------------------------------------------------------------

function _write( sText , _term)
	if _term == nil then
		_term = term
	end
	local w,h = _term.getSize()		
	local x,y = _term.getCursorPos()
	
	local nLinesPrinted = 0
	local function newLine()
		if y + 1 <= h then
			_term.setCursorPos(1, y + 1)
		else
			_term.setCursorPos(1, h)
			_term.scroll(1)
		end
		x, y = _term.getCursorPos()
		nLinesPrinted = nLinesPrinted + 1
	end
	
	-- Print the line with proper word wrapping
	while string.len(sText) > 0 do
		local whitespace = string.match( sText, "^[ \t]+" )
		if whitespace then
			-- Print whitespace
			_term.write( whitespace )
			x,y = _term.getCursorPos()
			sText = string.sub( sText, string.len(whitespace) + 1 )
		end
		
		local newline = string.match( sText, "^\n" )
		if newline then
			-- Print newlines
			newLine()
			sText = string.sub( sText, 2 )
		end
		
		local text = string.match( sText, "^[^ \t\n]+" )
		if text then
			sText = string.sub( sText, string.len(text) + 1 )
			if string.len(text) > w then
				-- Print a multiline word				
				while string.len( text ) > 0 do
					if x > w then
						newLine()
					end
					_term.write( text )
					text = string.sub( text, (w-x) + 2 )
					x,y = _term.getCursorPos()
				end
			else
				-- Print a word normally
				if x + string.len(text) - 1 > w then
					newLine()
				end
				_term.write( text )
				x,y = _term.getCursorPos()
			end
		end
	end
	
	return nLinesPrinted
end

-----------------------------------------------------------------------------------------------------------------------------------

function slowWrite( sText, nRate, _term )
	if _term == nil then
		_term = term
	end

    if nRate ~= nil and type( nRate ) ~= "number" then
        error( "bad argument #2 (expected number, got " .. type( nRate ) .. ")", 2 )
    end
    nRate = nRate or 20
    if nRate < 0 then
        error( "Rate must be positive", 2 )
    end

    local nSleep = 1 / nRate
        
    sText = tostring( sText )
    local x,y = _term.getCursorPos()
    local len = string.len( sText )
    
    for n=1,len do
        _term.setCursorPos( x, y )
        sleep( nSleep )
        local nLines = _write( string.sub( sText, 1, n ) , _term)
        local newX, newY = _term.getCursorPos()
        y = newY - nLines
    end
end

-----------------------------------------------------------------------------------------------------------------------------------

function slowPrint( sText, nRate, _term)
	if _term == nil then
			_term = term
	end
    slowWrite( sText, nRate , _term)
    print()
end

-----------------------------------------------------------------------------------------------------------------------------------

function formatTime( nTime, bTwentyFourHour )
	local sTOD = nil
	if not bTwentyFourHour then
		if nTime >= 12 then
			sTOD = "PM"
		else
			sTOD = "AM"
		end
		if nTime >= 13 then
			nTime = nTime - 12
		end
	end

	local nHour = math.floor(nTime)
	local nMinute = math.floor((nTime - nHour)*60)
	if sTOD then
		return string.format( "%d:%02d %s", nHour, nMinute, sTOD )
	else
		return string.format( "%d:%02d", nHour, nMinute )
	end
end

local function makePagedScroll( _term, _nFreeLines )
	local nativeScroll = _term.scroll
	local nFreeLines = _nFreeLines or 0
	return function( _n )
		for n=1,_n do
			nativeScroll( 1 )
			
			if nFreeLines <= 0 then
				local w,h = _term.getSize()
				_term.setCursorPos( 1, h )
				_term.write( "Press any key to continue" )
				os.pullEvent( "key" )
				_term.clearLine()
				_term.setCursorPos( 1, h )
			else
				nFreeLines = nFreeLines - 1
			end
		end
    end
end

function pagedPrint( _sText, _nFreeLines )
	local nativeScroll = term.scroll
	term.scroll = makePagedScroll( term, _nFreeLines )
	local result = print( _sText )
	term.scroll = nativeScroll
	return result
end

local function tabulateCommon( bPaged, ... )
	local tAll = { ... }
	
	local w,h = term.getSize()
	local nMaxLen = w / 8
	for n, t in ipairs( tAll ) do
		if type(t) == "table" then
			for n, sItem in pairs(t) do
				nMaxLen = math.max( string.len( sItem ) + 1, nMaxLen )
			end
		end
	end
	local nCols = math.floor( w / nMaxLen )

	local nLines = 0
	local function newLine()
		if bPaged and nLines >= (h-3) then
			pagedPrint()
		else
			print()
		end
		nLines = nLines + 1
	end
	
	local function drawCols( _t )
		local nCol = 1
		for n, s in ipairs( _t ) do
			if nCol > nCols then
				nCol = 1
				newLine()
			end

			local cx,cy = term.getCursorPos()
			cx = 1 + (nCol - 1) * (w / nCols)
			term.setCursorPos( cx, cy )
			term.write( s )

			nCol = nCol + 1  	
		end
		print()
	end
	for n, t in ipairs( tAll ) do
		if type(t) == "table" then
			if #t > 0 then
				drawCols( t )
			end
		elseif type(t) == "number" then
			term.setTextColor( t )
		end
	end	
end

function tabulate( ... )
	tabulateCommon( false, ... )
end

function pagedTabulate( ... )
	tabulateCommon( true, ... )
end

local function serializeImpl( t, tTracking )	
	local sType = type(t)
	if sType == "table" then
		if tTracking[t] ~= nil then
			error( "Cannot serialize table with recursive entries" )
		end
		tTracking[t] = true
		
		local result = "{"
		for k,v in pairs(t) do
			result = result..("["..serializeImpl(k, tTracking).."]="..serializeImpl(v, tTracking)..",")
		end
		result = result.."}"
		return result
		
	elseif sType == "string" then
		return string.format( "%q", t )
	
	elseif sType == "number" or sType == "boolean" or sType == "nil" then
		return tostring(t)
		
	else
		error( "Cannot serialize type "..sType )
		
	end
end

function serialize( t )
	local tTracking = {}
	return serializeImpl( t, tTracking )
end

function unserialize( s )
	local func, e = loadstring( "return "..s, "serialize" )
	if not func then
		return s
	else
		setfenv( func, {} )
		return func()
	end
end

function urlEncode( str )
	if str then
		str = string.gsub (str, "\n", "\r\n")
		str = string.gsub (str, "([^%w ])",
		function (c)
			return string.format ("%%%02X", string.byte(c))
		end)
		str = string.gsub (str, " ", "+")
	end
	return str	
end

function deserializeJSON(json)
	local function parseValue(str)
    str = str:match("^%s*(.-)%s*$")
        
    if str:sub(1, 1) == '"' then
        return str:match('^"(.-)"'), str:match('^".-"(.*)')
    end
       
    local num = str:match("^-?%d+%.?%d*")
    if num then
        return tonumber(num), str:sub(#num + 1)
    end

    if str:sub(1, 4) == "true" then
        return true, str:sub(5)
    elseif str:sub(1, 5) == "false" then
        return false, str:sub(6)
    end

        if str:sub(1, 4) == "null" then
            return nil, str:sub(5)
        end

        if str:sub(1, 1) == "[" then
            local arr = {}
            str = str:sub(2)
            while str:sub(1, 1) ~= "]" do
                local value
                value, str = parseValue(str)
                table.insert(arr, value)
                str = str:match("^%s*,%s*(.-)$") or str
            end
            return arr, str:sub(2)
        end

        if str:sub(1, 1) == "{" then
            local obj = {}
            str = str:sub(2)
            while str:sub(1, 1) ~= "}" do
                local key
                key, str = parseValue(str)
                str = str:match("^%s*:%s*(.-)$")
                local value
                value, str = parseValue(str)
                obj[key] = value
                str = str:match("^%s*,%s*(.-)$") or str
            end
            return obj, str:sub(2)
        end

        return nil, str
    end

    local result, remaining = parseValue(json)
    if remaining:match("%S") then
        return nil, "Error parsing JSON: wrong format"
    end
    return result
end

-- Funkciya dlya serializacii JSON
function serializeJSON(tbl)
    local function serializeValue(value)
        if type(value) == "string" then
            return '"' .. value:gsub('"', '\\"') .. '"'
        elseif type(value) == "number" or type(value) == "boolean" then
            return tostring(value)
        elseif type(value) == "table" then
            local isArray = true
            local count = 0
            for k, _ in pairs(value) do
                count = count + 1
                if type(k) ~= "number" then
                    isArray = false
                end
            end

            local result = {}
            if isArray then
                for i = 1, count do
                    table.insert(result, serializeValue(value[i]))
                end
                return "[" .. table.concat(result, ",") .. "]"
            else
                for k, v in pairs(value) do
                    table.insert(result, '"' .. k .. '":' .. serializeValue(v))
                end
                return "{" .. table.concat(result, ",") .. "}"
            end
        else
            return 'null'
        end
    end
    return serializeValue(tbl)
end
